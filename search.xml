<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[冒泡算法及优化]]></title>
    <url>%2F2019%2F08%2F11%2F%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95%E5%8F%8A%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[在认识冒泡排序之前，我们先熟悉一下几个概念。 1. 整体有序和局部有序​ 首先我们熟悉一下什么叫局部有序和整体有序。在由一组整数组成的序列A[0, n - 1]中，满足A[i - 1]  A[i]的相邻元素称作顺序的； 否则是逆序的。不难看出，有序序列中每一对相邻元素都是顺序的，亦即,对任意1  i &lt; n都 有A[i - 1]  A[i]；反之，所有相邻元素均顺序的序列，也必然整体有序。 2. 扫描交换​ 由有序序列的上述特征，我们可以通过不断改善局部的有序性实现整体的有序：从前向后依 次检查每一对相邻元素，一旦发现逆序即交换二者的位置。对于长度为n的序列，共需做n - 1 次比较和不超过n - 1次交换，这一过程称作一趟扫描交换。 ​ 图2.1 通过4趟扫描交换对五个整数排序 ​ 以图2.1中由5个整数组成的序列A[0, 4] = { 6, 8, 5, 7, 4 }为例。 ​ 在扫描交换①过程中，{ 7, 4 }，{ 5, 4 }，{ 8, 4 }，{ 6, 4 }分别交换位置，扫描交换后的结果为{ 4, 6, 8, 5, 7}。  冒泡排序​ 可见，经过这样的一趟扫描，序列未必达到整体有序。如此，则要对该序列再做一趟扫描交换，比如，图2.1再经过扫描交换②的结果为{ 4, 5, 6, 8, 7 }。事实上，如图所示，需要反复进行多次扫描交换，直到如图中结果所示，在序列中不再含有任何逆序的相邻元素。多数的这类交换操作，都会使得越小（大）的元素朝上（下）方移动，直至它们抵达各自应处的位置。 ​ 排序过程中，所有元素朝各自最终位置的移动过程，犹如气泡在水中的上下沉浮， 冒泡排序(bubble sort)算法也因此得名。 ##]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>冒泡算法</tag>
        <tag>优化</tag>
      </tags>
  </entry>
</search>
